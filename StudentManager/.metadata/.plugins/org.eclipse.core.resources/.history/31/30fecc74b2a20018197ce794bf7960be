package com.runsystem.datnt.daos;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.List;

import javax.persistence.criteria.CriteriaQuery;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;

import org.springframework.beans.factory.annotation.Autowired;

public abstract class AbstractDao<PK extends Serializable, T> implements GenericDao<PK, T> {
	
	private final Class<T> persistentClass;
	
	@SuppressWarnings("unchecked")
	public AbstractDao() {
		this.persistentClass = (Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[1];
	}
	
	@Autowired
	private SessionFactory sessionFactory;
	
	/*
	 * Get current session was generated by sessionFactory
	 * 
	 * @return session
	 */
	protected Session getSession() {
		return sessionFactory.getCurrentSession();
	}
	
	@SuppressWarnings("unchecked")
	public PK add(T entity) {
		return (PK) getSession().save(entity);
	}
	
	/*
	 * Update a entity in database
	 * 
	 * @param entity
	 */
	public void update(T entity) {
		getSession().update(entity);
	}
	
	/*
	 * Delete a entity in database
	 * 
	 * @param entity
	 */
	public void remove(T entity) {
		getSession().delete(entity);
	}
	
	/*
	 * Retrieve a entity in database by entity's id
	 * 
	 * @param id 
	 */
	public T getByKey(PK id) {
		return (T) getSession().get(persistentClass, id);
	}
	
	public List<T> list() {
		CriteriaQuery<T> criteriaQuery = getSession().getCriteriaBuilder().createQuery(persistentClass);
		criteriaQuery.from(persistentClass);
		return getSession().createQuery(criteriaQuery).getResultList();
	}
	
	/*
	 * Get named query
	 * 
	 * @param namedQuery
	 * 
	 * @return query
	 */
	@SuppressWarnings("unchecked")
	public Query<T> buildQuery(String namedQuery) {
		return getSession().getNamedQuery(namedQuery);
	}
	
	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}
}
