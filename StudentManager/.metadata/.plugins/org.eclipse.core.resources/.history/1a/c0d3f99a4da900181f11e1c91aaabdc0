package com.runsystem.datnt.daos.implementations;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.runsystem.datnt.daos.interfaces.StudentDao;
import com.runsystem.datnt.entities.Records;
import com.runsystem.datnt.entities.School;
import com.runsystem.datnt.entities.Student;
import com.runsystem.datnt.models.SearchStudentModel;
import com.runsystem.datnt.models.StudentListModel;
import com.runsystem.datnt.models.StudentModel;

@Repository
public class StudentDaoImpl implements StudentDao {

	@Autowired
	private SessionFactory sessionFactory;
	
	public boolean insert(StudentModel studentInfo) {
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		boolean success = false;
		
		String maxIdStudent  = "SELECT MAX(student_id) FROM STUDENT";
		String maxIdUser     = "SELECT MAX(user_id) FROM USER";
		String studentQuery  = "INSERT INTO STUDENT(student_id, student_code, student_name, student_startyear, school_id) " +
							    "VALUES(:id, :code, :name, :schoolyear, :schoolid)";
		String recordQuery   = "INSERT INTO RECORDS(student_id, records_sex, records_birthday, records_phone, records_email, records_address) " +
						        "VALUES(:id, :sex, :birthday, :phone, :email, :address)";
		String userQuery     = "INSERT INTO USER(user_id, user_username, user_password, student_id) " + 
						      	"VALUES(:id, :username, :password, :studentid)";
		String userRoleQuery = "INSERT INTO USER_ROLE(user_id, role_id) " +
						      	"VALUES(:userid, :roleid)";
		
		try {
			transaction = session.beginTransaction();
			int maxStudent = (Integer) session.createSQLQuery(maxIdStudent).uniqueResult();
			int maxUser = (Integer) session.createSQLQuery(maxIdUser).uniqueResult();
								
			session.createSQLQuery(studentQuery)
				.setParameter("id", maxStudent + 1)
				.setParameter("code", studentInfo.getStudentCode())
				.setParameter("name", studentInfo.getStudentName())
				.setParameter("schoolyear", studentInfo.getSchoolYear())
				.setParameter("schoolid", studentInfo.getSchool())
				.executeUpdate();

			session.createSQLQuery(recordQuery)
				.setParameter("id", maxStudent + 1)
				.setParameter("sex", studentInfo.getSex())
				.setParameter("birthday", studentInfo.getBirthday())
				.setParameter("phone", studentInfo.getPhone())
				.setParameter("email", studentInfo.getEmail())
				.setParameter("address", studentInfo.getAddress())
				.executeUpdate();

			session.createSQLQuery(userQuery)
				.setParameter("id", maxUser + 1)
				.setParameter("username", studentInfo.getStudentCode())
				.setParameter("password", studentInfo.getPassword())
				.setParameter("studentid", maxStudent + 1)
				.executeUpdate();

			session.createSQLQuery(userRoleQuery)
				.setParameter("userid", maxUser + 1)
				.setParameter("roleid", 2)
				.executeUpdate();
			transaction.commit();
			success = true;
		} catch (Exception ex) {
			if (transaction != null) {
				transaction.rollback();
			}
			success = false;
			ex.printStackTrace();
		} finally {
			session.close();
		}
		
		return success;
	}
	
	@SuppressWarnings("unchecked")
	public List<StudentListModel> list() {
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		List<StudentListModel> studentList = new ArrayList<StudentListModel>();
		
		
		String queryString = "select st.*, r.*, sc.* from STUDENT st, RECORDS r, SCHOOL sc WHERE st.student_id = r.student_id AND st.school_id=sc.school_id;";
		try {
			transaction = session.beginTransaction();
			Query<Object[]> query = session.createSQLQuery(queryString).addEntity(Student.class).addEntity(Records.class).addEntity(School.class);
			for (Object[] result : query.list()) {
				studentList.add(new StudentListModel((Student) result[0], (Records) result[1], (School) result[2]));
			}
			transaction.commit();
		} catch (Exception ex) {
			if (transaction != null) {
				transaction.rollback();
			}
			ex.printStackTrace();
		} finally {
			session.close();
		}
		return studentList;
	}
	
	@SuppressWarnings("unchecked")
	public String getMaxCode() {
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		String maxCode = null;
		
		String queryString = "SELECT MAX(student_code) FROM STUDENT";
		
		try {
			transaction = session.beginTransaction();
			Query<String> query = session.createSQLQuery(queryString);
			maxCode = query.uniqueResult();
			transaction.commit();
		} catch (Exception ex) {
			if (transaction != null) {
				transaction.rollback();
			}
			ex.printStackTrace();
		} finally {
			session.close();
		}
		
		return maxCode;
	}

	/*
	 * Search student
	 * 
	 * @param searchInfo
	 * 
	 * @return List of Student
	 */
	@SuppressWarnings("unchecked")
	public List<StudentListModel> search(SearchStudentModel searchInfo) {
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		List<StudentListModel> students = new ArrayList<StudentListModel>();
		
		String queryString = "SELECT st.*, r.*, sc.* " + 
							 "FROM STUDENT st, RECORDS r, SCHOOL sc " +
							 "WHERE st.student_id = r.student_id " + 
							 	"AND st.school_id = sc.school_id " +
							 	"AND st.student_code like :code " +
							 	"AND st.student_name like :name " +
							 	"AND r.records_sex like :sex " +
							 	"AND sc.school_id like :schoolid ";
		
		if (!searchInfo.getDateFrom().isEmpty() && !searchInfo.getDateTo().isEmpty()) {
			queryString += "AND st.student_startyear >= :datefrom AND st.student_startyear <= :dateto ";
		}
		
		try {
			transaction = session.beginTransaction();
			
			Query<Object[]> query = session
										.createSQLQuery(queryString)
											.addEntity(Student.class)
											.addEntity(Records.class)
											.addEntity(School.class);
			query.setParameter("code", searchInfo.getStudentCode())
				 .setParameter("name", searchInfo.getStudentName())
				 .setParameter("sex", searchInfo.getSex())
				 .setParameter("schoolid", searchInfo.getSchool());
			
			if (!searchInfo.getDateFrom().isEmpty() && !searchInfo.getDateTo().isEmpty()) {
				query.setParameter("datefrom", searchInfo.getDateFrom()).setParameter("dateto", searchInfo.getDateTo());
			}
			
			for (Object[] result : query.getResultList()) {
				students.add(new StudentListModel((Student) result[0], (Records) result[1], (School) result[2]));
			}
			
			transaction.commit();
		} catch (Exception ex) {
			if (transaction != null) {
				transaction.rollback();
			}
			ex.printStackTrace();
		} finally {
			session.close();
		}
		
		return students;
	}

	/*
	 * Update student
	 * 
	 * @param studentInfo
	 * 
	 * @return boolean true if update success, else return false.
	 */
	public boolean update(StudentModel studentInfo) {
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		boolean success = false;
		
		String getSchoolQuery = "SELECT sc.school_id FROM SCHOOL sc WHERE sc.school_code = :code";
		String queryString = "UPDATE STUDENT st, RECORDS r " + 
							 "SET st.student_name = :name," +
							 	" st.student_startyear = :schoolyear," + 
							 	" st.school_id = :schoolid," + 
							 	" r.records_sex = :sex," + 
							 	" r.records_birthday = :birthday," +
							 	" r.records_phone = :phone," +
							 	" r.records_email = :email," +
							 	" r.records_address = :address " + 
							 "WHERE st.student_id = r.student_id AND st.student_code = :code";
		
		try {
			transaction = session.beginTransaction();
			
			int schoolId = (Integer) session.createSQLQuery(getSchoolQuery).setParameter("code", studentInfo.getSchool()).uniqueResult();
			
			success = session.createSQLQuery(queryString)
						.setParameter("name", studentInfo.getStudentName())
						.setParameter("schoolyear", studentInfo.getSchoolYear())
						.setParameter("schoolid", schoolId)
						.setParameter("sex", studentInfo.getSex())
						.setParameter("birthday", studentInfo.getBirthday())
						.setParameter("phone", studentInfo.getPhone())
						.setParameter("email", studentInfo.getEmail())
						.setParameter("address", studentInfo.getAddress())
						.setParameter("code", studentInfo.getStudentCode())
						.executeUpdate() > 0;
			
			transaction.commit();
		} catch (Exception ex) {
			if (transaction != null) {
				transaction.rollback();
			}
			success = false;
			ex.printStackTrace();
		} finally {
			session.close();
		}
		
		return success;
	}

	public boolean delete(String studentCode) {
		Session session = sessionFactory.openSession();
		Transaction transaction = null;
		boolean success = false;
		
		String query = "DELETE st, r, u " +
				 	   "FROM STUDENT st, RECORDS r, USER u " +
				 	   "WHERE st.student_id = r.student_id AND st.student_id = u.student_id AND st.student_id = :studentid";
		
		try {
			
		} catch (Exception ex) {
			if (transaction != null) {
				transaction.rollback();
			}
			success = false;
			ex.printStackTrace();
		} finally {
			session.close();
		}
	
		return success;
	}

}
