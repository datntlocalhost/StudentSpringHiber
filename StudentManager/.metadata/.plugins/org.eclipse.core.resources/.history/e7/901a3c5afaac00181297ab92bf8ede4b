package com.runsystem.datnt.daos.impl;

import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.mysql.cj.log.Log;
import com.runsystem.datnt.daos.TokenDao;
import com.runsystem.datnt.dtos.TokenDto;
import com.runsystem.datnt.exceptions.InsertException;
import com.runsystem.datnt.exceptions.SelectNullException;
import com.runsystem.datnt.utils.LogginUtils;
import com.runsystem.datnt.utils.ParameterUtils;

@Repository
public class TokenDaoImpl implements TokenDao {

	@Autowired
	private SessionFactory sessionFactory;
	
	/*
	 * Insert token to Token table.
	 * 
	 * @param token
	 * 
	 * @throws InsertException if insert failed.
	 */
	public void insert(TokenDto token) throws InsertException {
		LogginUtils.getInstance().logStart(this.getClass(), "insert");
		
		Session session = sessionFactory.getCurrentSession();
		
		String queryString = "INSERT INTO TOKEN " + 
							 "(	"				  + 
							 "	token_username,"  +
							 "	token_value," 	  +
							 "	token_timestamp"  +
							 ")" 				  +
							 "VALUES " 			  +
							 "(" 				  +
							 "	:username," 	  +
							 "	:value," 		  +
							 "	:timestamp" 	  +
							 ")";
		boolean success = true;
		
		try {
			
			@SuppressWarnings("unchecked")
			Query<TokenDto> query = session.createNativeQuery(queryString);
			
			query.setParameter("username",  token.getUsername());
			query.setParameter("value",     token.getToken());
			query.setParameter("timestamp", token.getTimestamp());
			
			LogginUtils.getInstance().logQuery(this.getClass(), query);
			
			query.executeUpdate();
			
		} catch (Exception ex) {
			LogginUtils.getInstance().logError(this.getClass(), ex);
		}
		
		logger.info("insert - [END]");
	}

	/*
	 * Get last token of user.
	 * 
	 * @param username
	 * 
	 * @return tokendto
	 * 
	 * @throws SelectNullException
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public TokenDto selectLastToken(String username) throws SelectNullException {
		logger.info("selectLastToken - [START]");
		
		Session session = sessionFactory.getCurrentSession();
		TokenDto token = null;
		
		String queryString = "SELECT " 								  +
							 "  t.token_username as username," 		  +
							 "  t.token_value as token," 			  +
							 "	t.token_timestamp as timestamp "      +
							 "FROM " 								  + 
							 "	TOKEN t," 							  +
							 "  (" 									  +
							 "		SELECT MAX(token_id) as maxid "   +
							 "      FROM TOKEN " 					  +
							 "		WHERE token_username = :username" +
							 "	) as tk " 							  +
							 "WHERE "  								  + 
							 "	t.token_id = tk.maxid";
		
		try {
			
			Query<TokenDto> query = session.createNativeQuery(queryString);
			query.setParameter("username", username);
			query.setResultTransformer(Transformers.aliasToBean(TokenDto.class));
			
			token = query.getSingleResult();
			
			logger.info("Execute query" + ParameterUtils.paramToString(query));
						
			if (token == null) {
				throw new SelectNullException("Select token from database is null.");
			} else {
				logger.info("Execute query result : " + token.toString());
			}
			
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			throw new SelectNullException(ex.getMessage());
		}
		
		logger.info("selectLastToken - [END]");
		return token;
	}

}
